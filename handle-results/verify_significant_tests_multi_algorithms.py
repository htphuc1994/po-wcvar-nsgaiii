# -*- coding: utf-8 -*-
"""
Reproduce statistics for NSGA-III-HOP vs baselines:
- Month 1: median WCVaR for HOP, baseline median range, one-sided Wilcoxon (HOP < comparator)
  with Holm correction across 5 algorithms, and rank-biserial r.
- Early windows: mean WCVaR over M1–M2, M1–M3, M1–M6, M1–M11 with Wilcoxon + Holm.
- Per-month wins for M4–M7 (Holm within month).
"""

from math import erf, sqrt
from collections import Counter
import numpy as np
import pandas as pd

# -----------------------------
# 0) Enter the data EXACTLY as provided
# -----------------------------
data_raw = {
    "SMSEMOA": {
        100: [0.2999519326513, 0.0500171246281, 0.0019791331907, 0.0044735414568, 0.0193258802823, 0.0286885637922, 0.0221481930547, 0.0167454878316, 0.0587970489128, 0.0383390680464, 0.0491473443964, 0.9902816386869],
        101: [0.2988745169261, 0.0330435793032, 0.0018640628757, 0.0168468713877, 0.1462448222127, 0.1366942632594, 0.2914166268555, 0.1711171943465, 0.0991750155222, 0.0960033559374, 0.0488222471040, 0.0681395869506],
        102: [0.2998819426178, 0.0623823291950, 0.0311759596804, 0.0354060188165, 0.0388073332488, 0.2137067823709, 0.2317551837433, 0.0519661598187, 0.0609072535378, 0.0553227377262, 0.0693779275001, 0.1338827579070],
        103: [0.2994661925936, 0.0411023303315, 0.0007154775113, 0.0392477759207, 0.1209275441490, 0.1432870793998, 0.1489064803244, 0.0456094805736, 0.0450171181311, 0.0594740025395, 0.1249205195738, 0.1489861302464],
        104: [0.2993418841304, 0.0300209368158, 0.0058567992985, 0.0053835214161, 0.0102920735505, 0.2624953330083, 0.1378222965653, 0.0080669449817, 0.0342441702502, 0.0210945586959, 0.0283729297099, 0.0478465861171],
        105: [0.2999355791450, 0.0359508254996, 0.0038080175041, 0.0066923131356, 0.0102690939943, 0.2068692761715, 0.1948019360935, 0.0206796949047, 0.1328618958262, 0.1290103728703, 0.1340239126840, 0.1616491328342],
        106: [0.2982231699694, 0.0369414120964, 0.0079635193012, 0.0113569332294, 0.0098080731009, 0.3063181534429, 0.0135776572301, 0.0115976401559, 0.0465935066338, 0.0453507134328, 0.0577830669810, 0.0902650762207],
        107: [0.2997881568482, 0.0449256609401, 0.0437307169479, 0.0052411405160, 0.0616738654759, 0.0591744254380, 0.0248648364968, 0.0320408304697, 0.0268639518180, 0.0303642046311, 0.3902327687156, 0.4057499576211],
        108: [0.2998185261456, 0.0331068243480, 0.0021799861648, 0.0021268923450, 0.8738371883001, 0.7517923532114, 0.0474681383251, 0.1037978265133, 0.0342606811935, 0.0362835213614, 0.0420037465207, 0.1138557628664],
        109: [0.2997947048058, 0.0407443801510, 0.0130217383640, 0.0270728665165, 0.0278554675532, 0.0449294927517, 0.0527112000502, 0.0276579443450, 0.0830174304106, 0.0776805610715, 0.2605676078948, 0.2663809293187],
    },
    "CTAEA": {
        100: [0.2996627153275, 0.0941886915414, 0.0193098607782, 0.0084211651740, 0.0534543820052, 0.4544034169222, 0.4427656131011, 0.4129426796191, 0.3956528086614, 0.5936613439000, 0.1522247174880, 0.1688821040573],
        101: [0.2998973068664, 0.1138125791482, 0.0560339916887, 0.0915496113492, 0.8027797344094, 0.7775908025905, 0.3933532641750, 0.1209066823776, 0.0763172174780, 0.0457533654899, 0.0499614498686, 0.1197935980162],
        102: [0.2999693726510, 0.1551679257210, 0.0027318052257, 0.1822840940426, 0.7915252800444, 0.4379941682645, 0.4092978772094, 0.2070405155136, 0.1960468081884, 0.0265987195999, 0.8109007369974, 0.7705950466005],
        103: [0.2999489048572, 0.2183043284367, 0.1141923697359, 0.0777576795512, 0.0993027918388, 0.5510248216630, 0.5388493861714, 0.2254516548865, 0.1916712116274, 0.2034288156007, 0.1992380256396, 0.2075093541795],
        104: [0.2999682155387, 0.1706258032168, 0.0893981880557, 0.1043586901771, 0.6105084146918, 0.1732834852671, 0.2245359876673, 0.3267648976754, 0.1997752691085, 0.4380000669493, 0.0069390078423, 0.3633290357772],
        105: [0.2999877692072, 0.1663919836868, 0.0734624067851, 0.1334210617266, 0.0990366750302, 0.0974014241306, 0.0526631471947, 0.0557001305148, 0.0572758048396, 0.0741279484154, 0.0527896995095, 0.6180997044981],
        106: [0.2999136891508, 0.0742266958774, 0.5766558896745, 0.4512030975925, 0.3328921052136, 0.2392100966931, 0.2528225966098, 0.2475900700687, 0.2371736128999, 0.1904531869628, 0.3435985016185, 0.9390198491461],
        107: [0.2999835628281, 0.0981247773972, 0.0438217024987, 0.1899820756556, 0.1162716808656, 0.5042480209307, 0.5236664211856, 0.1516495674388, 0.0884009560693, 0.1041244051944, 0.1198193996356, 0.0016631589900],
        108: [0.2996266734808, 0.2470783807317, 0.1781893496886, 0.0739192493845, 0.9055757490057, 0.7899294637830, 0.9716480611982, 0.7217060323529, 0.7248031614687, 0.6961370539737, 0.3258845179130, 0.1599489157921],
        109: [0.2999439431855, 0.2096454346701, 0.0505161503897, 0.0254559466532, 0.5387657538240, 0.5080806959553, 0.0628250473365, 0.0581308609868, 0.0504810213248, 0.2167143125722, 0.2471649256520, 0.5248792408372],
    },
    "UNSGA3": {
        100: [0.2936842934613, 0.3083278796084, 0.0535764498488, 0.0129759786557, 0.1597685229527, 0.2480220967556, 0.2845232224508, 0.1314185247157, 0.0007822856671, 0.3626860352968, 0.4532449957024, 0.1965666342031],
        101: [0.2946981760605, 0.3743203127763, 0.3247809017114, 0.2789225662198, 0.1935998305239, 0.2115435963561, 0.3050573735667, 0.1964891812618, 0.0230697907785, 0.4436126810630, 0.1042475153135, 0.1723462046220],
        102: [0.2971460537158, 0.2452694219803, 0.0505613698684, 0.0191152154945, 0.2094481815766, 0.3210986459768, 0.2357201520827, 0.0636184572074, 0.0032010087588, 0.0959177161138, 0.4953668163275, 0.1694692190604],
        103: [0.2926238220725, 0.2562713932624, 0.0443241824769, 0.0440808436990, 0.1803932799031, 0.2544121952814, 0.2222643229871, 0.0861105092187, 0.0094270273986, 0.4155071607530, 0.3714379312828, 0.1641851472633],
        104: [0.2613801321687, 0.2831046707883, 0.1381350088824, 0.0474526307663, 0.1558494882698, 0.2978393095688, 0.2732367580690, 0.1698261184803, 0.0000023758788, 0.3782702657032, 0.4074356627107, 0.1916527441196],
        105: [0.2920781840289, 0.2732029633146, 0.1067965758627, 0.1742806338149, 0.1758493318242, 0.1338390000181, 0.1612056651595, 0.2939763031988, 0.0408974157361, 0.4233637803581, 0.4523264180316, 0.2718227573457],
        106: [0.2958631946966, 0.2916942871823, 0.0907868920339, 0.0447054403112, 0.2667135063866, 0.2290318673344, 0.1883116575075, 0.1218096683438, 0.0622016450276, 0.3775427440422, 0.0596768919811, 0.2508015836058],
        107: [0.2888652618681, 0.3205728060190, 0.1880258626242, 0.0274594064385, 0.1560052568226, 0.2119795991045, 0.2326644410395, 0.1632761459397, 0.2171985004051, 0.0465395055960, 0.5693830800553, 0.3365802341771],
        108: [0.2925786737210, 0.2630204764660, 0.0956168577348, 0.0316718324528, 0.2326310443862, 0.2682967410971, 0.1910612287911, 0.1892442528630, 0.2470880277895, 0.1665248561220, 0.1333037986736, 0.1917977292940],
        109: [0.2961896649588, 0.2949372627286, 0.1435315679333, 0.0409716230572, 0.2887679830440, 0.3567481619632, 0.3680372956731, 0.1480563760460, 0.2057638865460, 0.2550889990014, 0.1705732899317, 0.0958814924476],
    },
    "RNSGA3": {
        100: [0.2981365070542, 0.0373205974007, 0.2148175007530, 0.0810324678316, 0.3172698685247, 0.3279814289305, 0.2986536752563, 0.2261469862185, 0.2263124209210, 0.2199708433555, 0.2983210607117, 0.2647129676594],
        101: [0.2871653225273, 0.0301345292775, 0.0077134177540, 0.0422266987030, 0.2861985846896, 0.0434418263511, 0.0384885893108, 0.0392395402480, 0.0362775194391, 0.0392291669915, 0.0413051688615, 0.0569996959050],
        102: [0.2963290854653, 0.0381250169243, 0.0087497824439, 0.0071901092385, 0.0125773719566, 0.2425440429410, 0.0113466950303, 0.0066979452411, 0.0038953579195, 0.0017484700089, 0.3759806299041, 0.3019259526005],
        103: [0.2648785864755, 0.0539934342532, 0.0042813547834, 0.0050210768649, 0.0102167369798, 0.2701180890664, 0.0108943609437, 0.0117035796010, 0.0142144012297, 0.0154942256127, 0.0185806441821, 0.0332917447921],
        104: [0.2944433179605, 0.0459578409720, 0.0045374299687, 0.0530319076237, 0.0637513522701, 0.1021289116742, 0.0107038953682, 0.0169701660616, 0.0499198734041, 0.0246795419932, 0.3139466780781, 0.2509081721749],
        105: [0.2749299260692, 0.0302447212628, 0.0026693775965, 0.0540448819284, 0.1986225874744, 0.0143077138689, 0.1702525569023, 0.1818340043130, 0.0089831906142, 0.0162194244280, 0.0720182458363, 0.1028542872661],
        106: [0.2904275358923, 0.0339726836726, 0.0053606528757, 0.0672653321471, 0.3614534668599, 0.0549270047090, 0.0548805725422, 0.0552129247502, 0.0353196761288, 0.0332529126090, 0.0344218909330, 0.0465250855674],
        107: [0.2967505212768, 0.0309010563629, 0.0609700700758, 0.0034953447849, 0.0069506206570, 0.1478195765915, 0.0355233921783, 0.2128937099817, 0.0073071361179, 0.0075419592088, 0.0097328369394, 0.0104687724640],
        108: [0.2571815660486, 0.0272182681768, 0.0005971870321, 0.0068119485319, 0.1843393769768, 0.3239431322036, 0.0191131175087, 0.0207172712662, 0.1481091099484, 0.0094250404286, 0.0132632174511, 0.0289203102616],
        109: [0.2734675437287, 0.0318838435719, 0.0001595232898, 0.0423920308750, 0.0475458981507, 0.0305486859619, 0.1028152882058, 0.0319440282585, 0.0114546207383, 0.0083342370018, 0.0055206379063, 0.7566176965553],
    },
    "NSGA-III": {
        100: [0.2976387029450, 0.0548425712096, 0.0211917604225, 0.0322232951320, 0.0395247256052, 0.2693796906888, 0.0332220318416, 0.2265160570674, 0.0128468475225, 0.0227119763624, 0.1218799123315, 0.0659567546810],
        101: [0.2998486467424, 0.1245660632079, 0.0710446305093, 0.0327351089197, 0.0625480559326, 0.2359240173317, 0.0864166001880, 0.0258779988919, 0.0188844207909, 0.0266362959614, 0.1181897532644, 0.1302675995349],
        102: [0.2996188442216, 0.1503489661372, 0.0296444095259, 0.0255576455789, 0.0586321162561, 0.0539032010640, 0.0751034658597, 0.1439755822016, 0.1263105161432, 0.1682921959825, 0.2600222574467, 0.1334715972341],
        103: [0.2995880258638, 0.0421300612476, 0.0607735495449, 0.0086425214163, 0.0180947444437, 0.0299241947086, 0.0673274931972, 0.1927816931288, 0.0222237785270, 0.1330574320644, 0.1191099615233, 0.1350673003584],
        104: [0.2990150002058, 0.0550654053051, 0.0162760283259, 0.0156061054619, 0.0862247543401, 0.1407866133499, 0.1266181033503, 0.0985366777039, 0.0367019058373, 0.0290680510311, 0.0296257991825, 0.3653315487465],
        105: [0.2989577099202, 0.0387855423391, 0.0111019788084, 0.0114074001475, 0.0275799327893, 0.3123888985046, 0.0149566816235, 0.0724232504376, 0.0054082206560, 0.0230929365047, 0.0152711786781, 0.0552831765160],
        106: [0.2993165276679, 0.0797644577886, 0.0140353837130, 0.0127543650265, 0.0150936107303, 0.0776634738361, 0.1047649194874, 0.1618364199647, 0.0171920342492, 0.0328452895912, 0.2074061491164, 0.2121048326652],
        107: [0.2974033506989, 0.2296073009335, 0.1668451054903, 0.1483472034082, 0.1660208799059, 0.3903162469138, 0.1502762458616, 0.1616536356902, 0.0086310726504, 0.0190611380892, 0.0459725134377, 0.0746136551137],
        108: [0.2995721815043, 0.0537370762252, 0.0057174674428, 0.0298121027274, 0.0400804012266, 0.3012232822072, 0.0270884348865, 0.0288289513584, 0.0982225695580, 0.1073435540706, 0.0259760830877, 0.0978714295228],
        109: [0.2992339929949, 0.1311615055429, 0.0143434772086, 0.0130455629127, 0.0558563268672, 0.2510359216215, 0.0506551350560, 0.0390815124890, 0.1155709917855, 0.0551360007248, 0.0652620229756, 0.0655523115225],
    },
    "NSGA-III-HOP": {
        100: [0.2404895689286, 0.0259685919985, 0.0105350495826, 0.0098547216423, 0.0665097737022, 0.1976645794083, 0.0810416432492, 0.0157901929342, 0.1530506783125, 0.0367051026670, 0.0234609954838, 0.2338595271601],
        101: [0.1826673569405, 0.0125358577175, 0.0390156348857, 0.0906093382282, 0.0962472314094, 0.0385338102037, 0.0326174060462, 0.0374601067402, 0.1762970569888, 0.1882629498710, 0.1739035302330, 0.3400047926235],
        102: [0.1212411779416, 0.0106160133091, 0.0836762481626, 0.0090849892420, 0.0157870505516, 0.0263330270553, 0.0256695565407, 0.0500673567868, 0.0159767658868, 0.0334907847444, 0.0555675451649, 0.0961108743519],
        103: [0.0633615934212, 0.0059190982343, 0.0057188470081, 0.0107135134347, 0.0339046889916, 0.0406725020396, 0.0099364957132, 0.0119574599268, 0.0103896677213, 0.0187068648639, 0.0207330970231, 0.0707032803675],
        104: [0.2430893414000, 0.0190407090672, 0.0056467786850, 0.0119225019817, 0.0343713426977, 0.0685035333966, 0.2019410494981, 0.0707900204493, 0.0232534150958, 0.0396380769436, 0.3567347658252, 0.4587322617041],
        105: [0.1857454153536, 0.0075793100032, 0.0115547541296, 0.0564641275721, 0.0711424318624, 0.0600140256452, 0.0370680754270, 0.0220330421296, 0.0068946121430, 0.0137798141091, 0.0212463603797, 0.1462189237197],
        106: [0.1087619964564, 0.0164428701709, 0.0118634670508, 0.0094159265293, 0.0123316459862, 0.0199141301917, 0.0335805929624, 0.0347588336782, 0.0351259479627, 0.0400046997888, 0.0456570525965, 0.1987492281776],
        107: [0.2387442286431, 0.0070585124239, 0.2072131492702, 0.1838371098377, 0.1817482852934, 0.2202625475302, 0.0604411110699, 0.1106050918770, 0.0098008280848, 0.0237670468551, 0.0657955145359, 0.0983461216187],
        108: [0.2478475603361, 0.0209744629731, 0.0973677361494, 0.0870726573951, 0.1139413878407, 0.1343186970158, 0.1738007550907, 0.1026288651598, 0.2093177500739, 0.2048438225369, 0.1699168282595, 0.1907557388626],
        109: [0.2165890060033, 0.0155997570572, 0.0123180532725, 0.0484503612630, 0.0680206593682, 0.0656208351193, 0.0741550645463, 0.0870551720586, 0.0229671181667, 0.0945662985834, 0.1050690934901, 0.1539488757516],
    },
}

# -----------------------------
# 1) Build long DataFrame
# -----------------------------
records = []
for alg, seeds in data_raw.items():
    for seed, arr in seeds.items():
        row = {"algorithm": alg, "seed": seed, "return": arr[0]}
        for m in range(1, 12):
            row[f"WCVaR_m{m}"] = arr[m]
        records.append(row)
df = pd.DataFrame(records).sort_values(["algorithm", "seed"]).reset_index(drop=True)

# -----------------------------
# 2) Wilcoxon signed-rank (paired, one-sided) + rank-biserial r
# -----------------------------
def _rankdata_avg(a):
    n = len(a)
    order = sorted(range(n), key=lambda i: a[i])
    ranks = [0.0]*n
    i = 0
    while i < n:
        j = i
        while j+1 < n and a[order[j+1]] == a[order[i]]:
            j += 1
        avg = (i+1 + j+1)/2.0
        for k in range(i, j+1):
            ranks[order[k]] = avg
        i = j+1
    return ranks

def wilcoxon_signed_rank_onesided(x, y, alternative="greater"):
    """
    Paired Wilcoxon using normal approximation, tie + continuity correction.
    Tests median(y - x) > 0 for alternative='greater'  (i.e., x < y).
    Returns: W_plus, n, z, p_one_sided, rank_biserial_r
    """
    d = [y_i - x_i for x_i, y_i in zip(x, y)]
    nz = [di for di in d if di != 0]
    if not nz:
        return 0.0, 0, 0.0, 1.0, 0.0
    abs_d = [abs(v) for v in nz]
    ranks = _rankdata_avg(abs_d)
    W_plus = sum(r for r, di in zip(ranks, nz) if di > 0)
    W_minus = sum(r for r, di in zip(ranks, nz) if di < 0)
    n = len(nz)
    mu = n*(n+1)/4.0
    tie_sum = sum(t*(t+1)*(2*t+1) for t in Counter(abs_d).values())
    var = (n*(n+1)*(2*n+1) - tie_sum) / 24.0
    if var == 0:
        z = 0.0; p = 1.0
    else:
        cc = 0.5
        z = (W_plus - mu - cc)/sqrt(var) if W_plus > mu else (W_plus - mu + cc)/sqrt(var)
        Phi = lambda t: 0.5*(1 + erf(t/sqrt(2)))
        p = 1 - Phi(z) if alternative == "greater" else Phi(z)
    denom = n*(n+1)/2.0
    r_rb = (W_plus - W_minus)/denom if denom > 0 else 0.0
    return W_plus, n, z, float(p), float(r_rb)

def holm_bonferroni(pvals):
    m = len(pvals)
    idx = np.argsort(pvals)
    out = np.empty(m)
    prev = 0.0
    for r, i in enumerate(idx, start=1):
        adj = (m - r + 1) * pvals[i]
        adj = max(adj, prev)     # monotone non-decreasing
        out[i] = min(adj, 1.0)
        prev = out[i]
    return out

# -----------------------------
# 3) Month 1: medians and Wilcoxon vs HOP
# -----------------------------
target = "NSGA-III-HOP"
comparators = ["SMSEMOA", "CTAEA", "UNSGA3", "RNSGA3", "NSGA-III"]

m1_hop = df[df["algorithm"] == target].sort_values("seed")["WCVaR_m1"].to_list()
m1_hop_median = float(np.median(m1_hop))

m1_base_medians = {}
for alg in comparators:
    v = df[df["algorithm"] == alg].sort_values("seed")["WCVaR_m1"].to_list()
    m1_base_medians[alg] = float(np.median(v))

# Paired Wilcoxon (HOP < comparator), Holm across 5 tests
pvals = []
pairs = []
rvals = []
for alg in comparators:
    v = df[df["algorithm"] == alg].sort_values("seed")["WCVaR_m1"].to_list()
    Wp, n, z, p, r = wilcoxon_signed_rank_onesided(m1_hop, v, alternative="greater")
    pvals.append(p); rvals.append(r); pairs.append((alg, Wp, n, z, p, r))
p_holm = holm_bonferroni(np.array(pvals))

print("=== Month 1 (M1) ===")
print(f"Median WCVaR(HOP) = {m1_hop_median:.4f}")
print("Baseline medians:", {k: round(v, 4) for k, v in m1_base_medians.items()})
print(f"Baseline median range = [{min(m1_base_medians.values()):.3f}, {max(m1_base_medians.values()):.3f}]")
for (alg, Wp, n, z, p, r), adj in zip(pairs, p_holm):
    print(f"HOP < {alg}: W+={Wp:.1f}, n={n}, z={z:.3f}, p={p:.6f}, Holm-p={adj:.6f}, r={r:+.3f}")

# -----------------------------
# 4) Early windows: mean WCVaR and Wilcoxon vs HOP (Holm across 5 algs)
# -----------------------------
def window_mean(series_cols):
    return df.groupby(["algorithm", "seed"])[series_cols].mean().mean(axis=1).reset_index(name="meanW")

def hop_vs_all_on_window(cols, label):
    hop_vals = df[df["algorithm"]==target].sort_values("seed")[cols].mean(axis=1).to_list()
    rows = []
    for alg in comparators:
        comp_vals = df[df["algorithm"]==alg].sort_values("seed")[cols].mean(axis=1).to_list()
        Wp, n, z, p, r = wilcoxon_signed_rank_onesided(hop_vals, comp_vals, alternative="greater")
        rows.append({
            "window": label, "comparator": alg, "W+": Wp, "n": n, "z": z, "p": p, "r_rb": r,
            "median_HOP": float(np.median(hop_vals)),
            "median_comp": float(np.median(comp_vals)),
            "median_diff": float(np.median(comp_vals) - np.median(hop_vals)),
        })
    out = pd.DataFrame(rows)
    out["p_holm"] = holm_bonferroni(out["p"].to_numpy())
    out["sig_0.05"] = out["p_holm"] < 0.05
    return out.sort_values("p_holm")

win_M12 = hop_vs_all_on_window(["WCVaR_m1","WCVaR_m2"], "M1–M2")
win_M13 = hop_vs_all_on_window(["WCVaR_m1","WCVaR_m2","WCVaR_m3"], "M1–M3")
win_M16 = hop_vs_all_on_window([f"WCVaR_m{i}" for i in range(1,7)], "M1–M6")
win_M111= hop_vs_all_on_window([f"WCVaR_m{i}" for i in range(1,12)], "M1–M11")

print("\n=== Early-window mean WCVaR: Holm-corrected p-values (HOP < comparator) ===")
for dfw in [win_M12, win_M13, win_M16, win_M111]:
    print(f"\n{dfw['window'].iloc[0]}")
    for _, r in dfw.iterrows():
        print(f"  HOP < {r['comparator']}: Holm-p={r['p_holm']:.6f}, r={r['r_rb']:+.3f}, "
              f"med(HOP)={r['median_HOP']:.4f}, med(comp)={r['median_comp']:.4f}, Δ={r['median_diff']:.4f}")

# -----------------------------
# 5) Per-month wins for M4–M7 (Holm within each month across the 5 comps)
# -----------------------------
def per_month_holm(month_idx):
    col = f"WCVaR_m{month_idx}"
    hop_vals = df[df["algorithm"]==target].sort_values("seed")[col].to_list()
    rows = []
    for alg in comparators:
        comp_vals = df[df["algorithm"]==alg].sort_values("seed")[col].to_list()
        Wp, n, z, p, r = wilcoxon_signed_rank_onesided(hop_vals, comp_vals, alternative="greater")
        rows.append({"comp":alg,"p":p,"r":r})
    out = pd.DataFrame(rows)
    out["p_holm"] = holm_bonferroni(out["p"].to_numpy())
    out["sig"] = out["p_holm"] < 0.05
    return out.sort_values("p_holm")

print("\n=== Per-month wins (Holm within month) for M4–M7 ===")
for m in range(4, 8):
    res = per_month_holm(m)
    winners = res[res["sig"]]["comp"].tolist()
    print(f"M{m}: significant vs {winners}  (Holm-p: {', '.join([f'{c}={p:.6f}' for c,p in zip(res['comp'], res['p_holm']) if c in winners])})")

# -----------------------------
# 6) Helpful one-liners for the paragraph
# -----------------------------
print("\n--- One-liners to paste ---")
print(f"M1: median WCVaR(HOP)={m1_hop_median:.4f}; baseline median range "
      f"[{min(m1_base_medians.values()):.3f}, {max(m1_base_medians.values()):.3f}]")
adj_vals = [f"{alg}:{adj:.3f}" for (alg, *_), adj in zip(pairs, p_holm)]
print("M1 Holm-adjusted p-values (HOP < comparator):", ", ".join(adj_vals))